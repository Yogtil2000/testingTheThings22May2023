1) When you want to use mostly the natural ordering and give the authority to the class itself so that it can compare itself then you need to use
the """comparable""" there:
   in the case of the Comparable for the sort() method you doesn't need to pass anything for specifying your logic:::(as you can directly write 
your logic in the compareTo no problem for that)

     -----------But in the case of the comparator you need to pass the logic on which you want to sort them 

so summary is you doesn't need to pass the "Comparable" to the Arrays.sort() or Collections.sort() it can be automatically picked up 
  but in the case of the "Comparator" you need to pass the comparator to provide the specific logic to sort the elements in the Arrays.sort()
or Collections.sort() method 

comparable--------> Collections.sort(list_of_student);
comparator--------> Collections.sort(list_of_student,comparator_object);

-----------------------------------------------------------------------------------------------------------------------------------------------
2)"Comparable" is the Interface present in the "java.lang" package and it has the ------------> compareTo(Object ref1) method in it.
"Comparator" is the Interface present in the "java.util" package and it has the ---------------->compare(Object ref1,Object ref2) method in it.

------------------------------------------------------------------------------------------------------------------------------------------------
3) we can sort on the basis of only one feature in the case of Comparable i.e for example if on the basis of id then only on the basis of Id 
  but in the case of the "Comparator " we have any number of the comparators like nameComparator , AddressComparator ,IdComparator and 
   you can send this "respective Comparator" object as an "Argument " to the Collection.sort() method .

-----------------------------------------------------------------------------------------------------------------------------------------------
4) When you are trying to use the "Comparator" then in that case you are not actually disturbs the main logic or the class.You can write the logic 
for the Comparator itself into the ANOTHER class it is fine..

   But in the case of the "Comparable" we need to do the modifications in the class itself as it is not allowed to write the compareTo() in the 
other class rather than "Student" as Student is the custom object on which we want to implement the sort() method.

