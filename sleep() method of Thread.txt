/* 
Execution Preventing methods of Thread:
1) sleep()  
2) join()
3) yield()

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1) sleep() :
      using which we are able to stop the current executing thread for the time 
      mentioned in this method itself in miliseconds,nanoseconds 
      
      this method throws the "InterruptedException" so to handle this either you need to 
      throws it or need to take up inside the try and catch() blocks .....
      
      There are basically 2 methods of the sleep() actually here they got by using the 
      "method overloading concept".
      
      and one of the sleep method is native as well:
           what actually means the method is native -- the method is native means that 
             its implementation is basically written inside the other programming languages 
             
             
             if you passed the illegal time stamp inside the sleep() method then it gives the 
             runtime exception "IllegalArgumentException".
             
    REM* :It is not allow to throws the "InterruptedException" over the run() method so that's 
           why in this case you need to write the try and catch block...
           
           SLEEP() METHOD IS ALSO A STATIC METHOD SO YOU CAN CALL IT DIRECTLY AS WELL 
           IN THE TARGETED THREAD IF YOU ARE PRESENT THERE...
         
         
    PROGRAM :
    
    public class Main extends Thread 
{
    public void run() 
    {
         try
         {
            for(int i=1;i<=5;i++)
            {
                Thread.sleep(0);
                System.out.println(i);
            }
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
     
    }
    public static void main(String args[]) 
    {
        Main t=new Main();
        t.start();
    }
}


--------------------------------------------------------------------------------------------------
2) Executing the single task through the multiple threads then see which thread will executes first 
and which will executes later...


public class Main extends Thread 
{
    public void run() 
    {
         try
         {
            for(int i=1;i<=5;i++)
            {
                Thread.sleep(2000);
                System.out.println(Thread.currentThread().getName()+" "+i);
            }
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
     
    }
    public static void main(String args[]) 
    {
        Main t1=new Main();
        t1.start();
        
        
        Main t2=new Main();
        t2.start();
    }
}

......Using the above example we are able to analyze the power of the multithreading and concurrency
    
    output:
    
Thread-0 1
Thread-1 1
Thread-1 2
Thread-0 2
Thread-1 3
Thread-0 3
Thread-1 4
Thread-0 4
Thread-1 5
Thread-0 5


--------------------------------------------------------------------------------------------------
Below is the reason why we use the start() method there instead of the run() itself 
   as already known about these is that when we use the run() method there program runs absolutely 
   but there the concept of the "multithreading " is absend and simple method calling functionality
   present there ...
   
   lets have a try:
   
           OUTPUT:
main 1
main 2
main 3
main 4
main 5
main 1
main 2
main 3
main 4
main 5



      
*/
public class Main extends Thread 
{
    public void run() 
    {
         try
         {
            for(int i=1;i<=5;i++)
            {
                Thread.sleep(2000);
                System.out.println(Thread.currentThread().getName()+" "+i);
            }
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
     
    }
    public static void main(String args[]) 
    {
        Main t1=new Main();
        t1.start();
        
        
        Main t2=new Main();
        t2.start();
        
        /*
        Here as well output varies :
Thread-0 1
Thread-1 1
Thread-0 2
Thread-1 2
Thread-0 3
Thread-1 3
Thread-0 4
Thread-1 4
Thread-0 5
Thread-1 5 

or it can be as follows :

Thread-1 1
Thread-0 1
Thread-1 2
Thread-0 2
Thread-1 3
Thread-0 3
Thread-1 4
Thread-0 4
Thread-1 5
Thread-0 5


        */
    }
}