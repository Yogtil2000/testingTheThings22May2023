/* 
Execution Preventing methods of Thread:
1) sleep()  
2) join()
3) yield()

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
yield method is also comes into the category of the " Prevent Thread Execution Method ":
    It is the method which stops the current thread execution and gives the chance to execute the 
    other threads 
    
    real world example :
         suppose you are in the mall and there you seen that one person who buy only few things 
         and the another one who buy the tremendous amount of things so here second person says 
         lets make the bill of the other person as he had only few things so its easy and fast 
         process to make bill of it.
          
          So it stops the current executing thread and give chance to another thread to execute...
          
          
NOTE: till Java5 yield() method internally used sleep() method 

but from the java 6 : it has the separate differnt implementations.
    Now here "thread" "provides the hint to the threadSchedular"......
    
    Then it depends on the ThreadSchedular that accept or deny the hint and based on that 
    
    So here BASICALLY THREAD WHICH HAS THE HIGHER OR THE SAME PRIORITY WILL BE EXECCUTED AT THAT TIME
    
    Here the output is never constant:
     It depends on accept the hint by threadSchedular that when thread gives hint to the 
     threadSchedular like I am ready to stop you can execute the thread which has "higher priority 
     or the same priority"
    
    "yield() " method doesn't have bydefault throws of the Exception 
    
  REM* :
     As once the current thread stops and start giving chance to others then after that 
         when the current thread resumes this thing is also not fixed or we didn't comment on the same 
            instead of that these things are depends on the machine/JVM/ThreadSechdular.
            
            
            
*/
public class Main extends Thread 
{
    
    public void run()
    {
        for(int i=1;i<=5;i++)
        {
            Thread.yield();
            System.out.println(Thread.currentThread().getName()+" "+i);
        }
    }
    public static void main(String args[]) 
    {
        Main t1=new Main();
        t1.start();
        
        for(int i=1;i<=5;i++)
        {
            System.out.println(Thread.currentThread().getName()+" "+i);
        }
       
        Main t2=new Main();
        t2.start();

    }
}